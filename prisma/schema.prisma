datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  displayName   String    @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?

  surveys   Survey[]
  responses SurveyResponse[]

  accounts   Account[]
  sessions   Session[]
  credential Credential?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Survey {
  id          String           @id @default(cuid())
  creatorId   String
  title       String
  description String?
  isPublished Boolean          @default(false)
  visibility  Visibility       @default(PUBLIC)
  archived    Boolean          @default(false)
  questions   SurveyQuestion[]
  responses   SurveyResponse[]

  creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SurveyQuestion {
  id           String           @id @default(cuid())
  surveyId     String
  text         String
  questionType QuestionType
  order        Int
  minValue     Int?
  maxValue     Int?
  options      QuestionOption[]

  survey          Survey           @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  responseAnswers ResponseAnswer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuestionOption {
  id         String @id @default(cuid())
  questionId String
  text       String
  order      Int

  question SurveyQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model SurveyResponse {
  id          String           @id @default(cuid())
  surveyId    String
  userId      String
  isComplete  Boolean          @default(false)
  submittedAt DateTime?
  answers     ResponseAnswer[]

  survey Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResponseAnswer {
  id         String     @id @default(cuid())
  responseId String
  questionId String
  answer     Json
  answerType AnswerType

  response SurveyResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  question SurveyQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AnswerType {
  FILL_IN_THE_BLANK
  SINGLE_SELECT
  MULTI_SELECT
  RATING_SCALE
}

enum QuestionType {
  MULTI_SELECT
  FILL_IN_THE_BLANK
  RATING_SCALE
  SINGLE_SELECT
}

enum Visibility {
  PUBLIC
  PRIVATE
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Credential {
  id             String @id @default(cuid())
  userId         String @unique
  hashedPassword String
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
