datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String @id @default(cuid())
  displayName     String @unique
  ethereumAddress String @unique

  surveys   Survey[]
  responses SurveyResponse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Survey {
  id          String           @id @default(cuid())
  creatorId   String
  title       String
  description String?
  isPublished Boolean          @default(false)
  archived    Boolean          @default(false)
  questions   SurveyQuestion[]
  responses   SurveyResponse[]

  creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SurveyQuestion {
  id           String           @id @default(cuid())
  surveyId     String
  text         String
  questionType QuestionType
  order        Int
  minValue     Int?
  maxValue     Int?
  options      QuestionOption[]

  survey          Survey           @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  responseAnswers ResponseAnswer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuestionOption {
  id         String @id @default(cuid())
  questionId String
  text       String
  order      Int

  question SurveyQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model SurveyResponse {
  id          String           @id @default(cuid())
  surveyId    String
  userId      String
  isComplete  Boolean          @default(false)
  submittedAt DateTime?
  answers     ResponseAnswer[]

  survey Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResponseAnswer {
  id         String @id @default(cuid())
  responseId String
  questionId String
  answer     Json

  response SurveyResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  question SurveyQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum QuestionType {
  MULTI_SELECT
  FILL_IN_THE_BLANK
  RATING_SCALE
  SINGLE_SELECT
}
